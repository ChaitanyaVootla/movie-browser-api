---
description: 
globs: 
alwaysApply: true
---
# Goal of movie-browser-api

The goal of this open source API project is to enrich the TMDB API with additional data related to ratings, reviews, and watch links for movies and TV series. We will leverage external data to build a modular, scalable, and cost-effective service.

Architecture Overview
Data Ingestion & Enrichment:

Base Data: Scrape the entire TMDB database for basic movie/series fields.

External IDs: Augment TMDB data using Wikidata and Google search scraping to extract additional external IDs (e.g. Rotten Tomatoes, Netflix, Prime Video, Apple TV, Hotstar). We'll accept duplicate data from multiple sources and consolidate them.

Ratings & Reviews: Scrape primary sources like IMDb and Rotten Tomatoes for ratings, review count, and one-line consensus.

Watch Links: Use Google search (with the gl parameter for regional variation) to obtain deep watch links, while also optionally using TMDB's watch providers data as a base.

Modularity: The system is designed so that new enrichment modules (for ratings/watch links) can be added or swapped easily.

Update Strategy:

Use TMDB's changes API to determine which movies/series have been updated, driving the frequency of subsequent enrichments.

Gradually reduce the scrape frequency for titles based on their release date, ensuring that recent titles are updated more often.

Regularly refresh external IDs (from Wikidata/Google) and ratings data, while maintaining consistency across sources.

Simplified Update Scheduling:

The system uses a straightforward approach to scheduling updates, with each movie/TV show having a next_update_time field that determines when it should be refreshed.

Update frequency is determined by content characteristics (new releases update daily, older content monthly).

When an update completes, the next_update_time is automatically set based on the content's update_frequency.

For immediate updates, the next_update_time can be overridden to a time in the past, triggering an update on the next scheduler run.

This approach provides both predictable updates for normal operation and the flexibility to force immediate updates when needed.

Technical Approach
Scraping & Data Collection:

Use AWS Lambda for scraping both Google search results and primary sources (IMDb, Rotten Tomatoes).

Leverage Puppeteer on Lambda to simulate real browsers (and set the appropriate gl parameter to spoof region).

Maintain a modular scraper design so that additional data sources or custom crawlers for streaming sites can be integrated later.

Data Storage & API:

Use PostgreSQL running on an EC2 instance to serve as both the database and the API server.

Store TMDB base data along with enriched fields, external IDs (from Wikidata and Google search), ratings, and watch links.

Design the schema to support consolidation of external IDs from multiple sources, so that duplicate information (e.g., Rotten Tomatoes ID) can be merged.

Content Delivery & Caching:

Serve the public API via Cloudflare as a CDN to ensure low latency and high availability worldwide.

Configure caching (with proper cache keys, including country-specific parameters) and purge strategies on updates.

Scalability & Modularity:

The system will be modular, with each enrichment source (e.g. TMDB, Wikidata, Google search, IMDb, Rotten Tomatoes) implemented as separate, interchangeable modules.

Start with the TMDB base data and gradually add enrichment layers:

Phase 1: Scrape the entire TMDB database for core fields.

Phase 2: Augment with external IDs from Wikidata and Google search.

Phase 3: Scrape source sites for ratings, review count, and a one-line consensus (starting with Rotten Tomatoes).

As an alternative approach, use TMDB's watch providers API as the base for watch links, then selectively scrape source sites or Google search to generate deep links.

Key Endpoints
GET /api/v1/movie/{id}

GET /api/v1/tv/{id}

GET /api/v1/movie/multiple?ids={ids}

GET /api/v1/tv/multiple?ids={ids}

Additional Considerations
Regional Customization: Leverage Google search's gl parameter to retrieve region-specific watch link data for 20â€“30 major countries.

Update Mechanism: Rely on the TMDB changes API to trigger updates; recent releases will be refreshed daily while older titles can have a reduced update frequency.

Cost Effectiveness:

Use AWS Lambda for on-demand scraping to minimize server costs.

Use Cloudflare for free/unmetered CDN delivery.

Run PostgreSQL on a cost-effective EC2 instance.

This updated plan outlines a scalable, modular approach to enriching TMDB data with external ratings, reviews, and watch links while maintaining cost efficiency and high performance.
